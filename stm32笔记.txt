                                          笔记
固件库：
1-汇编编写的启动文件  
startup_stm32f10xhd.s

2-时钟配置文件  
system_stm32f10x.c：把外部时钟HSE=8M,经过PLL倍频为72M

3-外设相关的  
Stm32f10x.h:实现寄存器映射     
stm32f10_xx.c:外设的驱动函数库文件

4-内核相关的  
CMSIS-Cortex 微控制器标准
core_cm3.c：实现了内核里面外设的寄存器映射

5-头文件的配置文件
stm32f10x_h:头文件的头文件

6-专门存放中断服务函数的c文件 
stm32f10_it.c

宏定义只能有一行，如果要多行要加/

Keil 5 点击build（F7） 全编译，解决办法！  https://jingyan.baidu.com/article/0320e2c1b32cb05b86507b08.html

尽量用sinf（float cosf( float x );）  不要用sin（double cos( double x );）   

M4特有 
  FPU ： 浮点运算单元（Float Point Unit） 开启方法：设置__FPU_PRESENT为1（F4已经默认为1） + __FPU_USED为1 在 Target选项卡里面，设置 Floating Point Hardware 为 Use Single Precision
  DSP ： Cortex-M4 执行所有的 DSP 指令集都可以在单周期内完成 （注意：需要添加：arm_math.h 头文件才可使用!!!）
        使用：为了使用 DSP 库的所有功能，我们还需要添加几个全局宏定义：
				1，__FPU_USED
				2，__FPU_PRESENT 
				3，ARM_MATH_CM4
				4，__CC_ARM
				5，ARM_MATH_MATRIX_CHECK
				6，ARM_MATH_ROUNDING  添加方法：点击 C/C++选项卡，然后在 Define 里面进行设置，两个宏之间用“,”隔开，Use FPU也要设置。
  
如果用中断的话，一定要加misc.c文件

CH340

const 在flash中

IAP（In Application Programming）即在应用编程，IAP 是用户自己的程序在运行过程中对User Flash 的部分区域进行烧写，目的是为了在产品发布后可以方便地通过预留的通信口对产品中的固件程序进行更新升级

ICode 中的 I 表示 Instruction，即指令。我们写好的程序编译之后都是一条条指令，存放在 FLASH中，内核要读取这些指令来执行程序就必须通过 ICode 总线
DCode 中的 D 表示 Data，即数据，那说明这条总线是用来取数的
SCode系统总线主要是访问外设的寄存器，我们通常说的寄存器编程，即读写寄存器都是通过这根系统总线来完成的。

从地址 addr，读取一个字   data=*(vu32*)addr;
 
Target 中选中微库“Use MicroLib”，为的是在日后编写串口驱动的时候可以使用 printf 函数

我们写好的程序编译之后都是一条条指令，存放在 FLASH中，内核要读取这些指令来执行程序就必须通过 ICode 总线
 
某位清零       a &= ~(1<<2);      几个连续位清零  a &= ~(3<<2*1);
某几位进行赋值  a |= (1<<2*2);     对变量的某位取反   a ^=(1<<6);“异或”

malloc 函数申请的是连续的一块内存  malloc 函数申请内存有不成功的可能，那我们在使用指向这块内存的指针时，必
须用 if（NULL ！= p）语句来验证内存确实分配成功了。  free 完之后，一定要给指针置 NULL。

如何将数值存储到指定的内存地址 假设现在需要往内存 0x12ff7c 地址上存入一个整型数 0x100。
		int *p = (int *)0x12ff7c;
		*p = 0x100;

-  keil5的第一个编译是只编译当前文件
-  <>:去系统的安装目录找 "":去当前工程目录下找
-  一个字节八位
-  IAP，全称是“In-Application 
-  Programming”，中文解释为“在程序中编程”
-  借助总线矩阵，可以实现主控总线到被控总线的访问，这样即使在多个高速外设同时运行期
   间，系统也可以实现并发访问和高效运行。总线矩阵用于主控总线之间的访问仲裁管理。仲裁采用循环调度算法。
-  AHB：高级高性能总线。
-  为了提高转换精度， ADC 配有独立电源，可以单独滤波并屏蔽 PCB 上的噪声。
	● ADC 电源电压从单独的 VDDA 引脚输入。
	● VSSA 引脚提供了独立的电源接地连接。
	为了确保测量低电压时具有更高的精度，用户可以在 VREF 上连接单独的 ADC 外部参考电压
	输入。 VREF+ 电压介于 1.8 V 到 VDDA 之间。VREF- 如果可用（取决于封装），则必须将其连接到 VSSA。
	ADC 输入范围： VREF- <=VIN <=VREF+      VREF+ ≤ VDDA
-   VDD是主供电电源，也是IO口输出电平的输入电源。
    VDDA是模拟电源，当使用到模拟信号的时候，比如AD（模数）或者DA（数模）的时候，系统会使用VDDA的电压作为参考电压来。
	不要求精准使用的话，可以直接把VDDA和VDD同时接入3v3V就行。如果要求精准，则需要做一个稳压电路，再接入VDDA
-  如果应用中没有使用外部电池， VBAT必须连接到VDD引脚上，经过一个电容旁路连接VDD。
-  AHB 域的最大频率为 168 MHz。高速 APB2 域的最大允许频率为 84 MHz。低速 APB1 域的最大允许频率为 42 MHz（F4）。
-  因为系统初始化SystemInit函数里初始化APB1总线时钟为4分频即42M，所以TIM2~TIM7、TIM12~TIM14的时钟为APB1的时钟的两倍即84M；APB2总线时钟为2分频即84M，TIM1、TIM8~TIM11的时钟为APB2时钟的两倍即168M。
-  内部时钟受温度影响
-  对于 ADC 和 DAC，在 GPIOx_MODER 寄存器中将所需 I/O 配置为模拟通道。
-  在模拟配置中， I/O 引脚不能为 5 V 容忍（凡是带有ADC字样的IO（也就是说IO口的复用功能为ADC这一类的引脚），都不兼容5V，反之都兼容5V）。
-  带有FT标志的IO口，都是兼容5V的。不是全部引脚都兼容5V，只是绝大部分
-  DMA1 控制器 AHB 外设端口与 DMA2 控制器的情况不同，不连接到总线矩阵，因此，仅 DMA2 数据流能够执行存储器到存储器的传输。
-  在16位的系统中（比如8086微机） 1字 （word）= 2字节（byte）= 16（bit）
   在32位的系统中（比如win32） 1字（word）= 4字节（byte）=32（bit）
   在64位的系统中（比如win64）1字（word）= 8字节（byte）=64（bit）
-  STM32F4 的 ADC 最大工作频率是36Mhz， 而 ADC 时钟（ADCCLK）来自 APB2，APB2 频率一般是84Mhz，所以我们一般设置 ADCPRE=01， 即4分频，这样得到 ADCCLK 频率为21Mhz，不超过36的最大频率

时钟
1  栈：变量（全局/局部），函数的调用
2  外部晶振8M经过9倍频为72M ；当使用内部高速时钟8M时HSI必须经过2分频，而后在进行16倍频，所以最大64M
3  AHB总线最大72M，而APB1最大36M，而定时器2 到7 时钟为APB1的2倍（36M情况下)。APB1不分频则为72M
4  ADC最大14M   MCO（PA8）主时钟输出，用于检测系统时钟是否正确

DMA
1  DMA1和DMA2，每个都有8个通道（不同的外设请求对应不同的通道/数据流）
2  多个DMA请求次要仲裁器（硬件方面DMA1的优先级高远DMA2）
3  在直接模式下（当 DMA_SxFCR 寄存器中的 DMDIS 值为“0”时），不使用 FIFO 的阈值级别控制：每完成一次从外设到 FIFO 的数据传输后，相应的数据立即就会移出并存储到目标中。
4  当实现存储器到存储器传输时不得使用直接模式。

存储器
1  DRAM：有电容，结构简单    SRAM：锁存器，结构复杂
2  有多少地址线就有多少种变化 18 根地址线一共可以表示218= 28 x1024= 512K 存储单元。
3  FSMC 是 Flexible Static Memory Controller 的缩写，译为灵活的静态存储控制器。它可以用于驱动包括 SRAM、NOR FLASH 以及
  NANDFLSAH 类型的存储器，不能驱动如 SDRAM 这种动态的存储器而在 STM32F429 系列的控
  制器中，它具有 FMC 外设，支持控制 SDRAM 存储器。



IIC
1  当接多个从机时，不工作的会输出高阻态。
2   SCL和SDA必须要接一个上拉电阻

SDIO
1  SD 卡使用 9-pin 接口通信，其中 3 根电源线、1 根时钟线、1 根命令线和 4 根数据线，SD 卡使用 9-pin 接口通信，其中 3 根电源线、1 根时钟线、1 根命令线和 4 根数据线，
2  速度比SPI快很多
3  nand flash以块读取和写入  norflash以块读以字节读写（故单片机内部flash都是这个）   sd卡基本都是nand
4  FIFO就是把少位数据缓存到多位再传输（例如4位数据发来先放在fifo等到8位再传输到单片机）



SPI
1   时钟极性 CPOL 是指 SPI 通讯设备处于空闲状态时，SCK 信号线的电平信号 (即 SPI 通讯开始前、
NSS 线为高电平时 SCK 的状态)。CPOL=0 时，SCK 在空闲状态时为低电平，CPOL=1 时，则相
反
2   时钟相位 CPHA 是指数据的采样的时刻，当 CPHA=0 时，MOSI 或 MISO 数据线上的信号将会在
SCK 时钟线的“奇数边沿”被采样。当 CPHA=1 时，数据线在 SCK 的“偶数边沿”采样。
3   SPI速度比SPI2，SPI3快   且SPI3和下载口引脚冲突了
4   SPI的最快速度为二分频，故SPI1最快36M，SPI2和SPI3最快18M
5   MSB高位数据在前；LSB低位数据在前
6   /为低电平有效
7   两个通信的SPI设备的模式必须相同。查看模块的手册配置模式

FLASH
1   扇区为块的细分
2   在写入数据之前必须先擦除
3   擦除时会把数据位全重置为1
4   写入数据时只能把位1的数据改为0
5   擦除时只能按最小单位擦除（一般为扇区）
6   STM32F4 的闪存模块由：主存储器、系统存储器、OPT 区域和选项字节等 4 部分组成
    系统存储器，这个主要用来存放 STM32F4 的 bootloader 代码，此代码是出厂的时候就固化 在 STM32F4 里面了，专门来给主存储器下载代码的。当 B0 接 V3.3，B1 接 GND 的时候，从该存储器启动（即进入串口下载模式）。

FATFS文件系统
1  NTFS：基于安全性的文件系统，是Windows NT所采用的独特的文件系统结构
2  FATFS是可裁剪的文件系统  代码量少、效率高  全c语言编写
		   integer.h：文件中包含了一些数值类型定义。
		• diskio.c：包含底层存储介质的操作函数，这些函数需要用户自己实现，主要添加底层驱动
		               函数。
		• ff.c：FatFs 核心文件，文件管理的实现方法。该文件独立于底层介质操作文件的函数，利用
		         这些函数实现文件的读写。
		• cc936.c：本文件在 option 目录下，是简体中文支持所需要添加的文件，包含了简体中文的
		            GBK 和 Unicode 相互转换功能函数。
		• ffconf.h: 这个头文件包含了对 FatFs 功能配置的宏定义，通过修改这些宏定义就可以裁剪
		             FatFs 的功能。如需要支持简体中文，需要把 ffconf.h 中的 _CODE_PAGE 的宏改成 936 并把
		            上面的 cc936.c 文件加入到工程之中
3  底层设备驱动函数是存放在 diskio.c 文件，我们的目的就是把 diskio.c 中的函数接口与 SPI Flash 芯
片驱动连接起来。总共有五个函数，分别为设备状态获取 (disk_status)、设备初始化 (disk_initialize)、
扇区读取 (disk_read)、扇区写入 (disk_write)、其他控制 (disk_ioctl)。

设计函数以传递指针类型的参数，无需使用全局变量
typedef struct MotionParameters
{
	float a;
	float b;
	float c;
}MP;

void fun0(MP *p)
{
	p->a = 0;
}
void fun1(MP *p)
{
	p->b = 1;
	fun0(p);
}
void fun2(MP *p)
{
	p->c = 2;
	fun1(p);
}
void main(void)
{
	MP MPData;
	fun2(&MPData);
}



















