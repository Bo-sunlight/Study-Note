                                                     C语言笔记
CPU 不直接和内存打交道（寄存器其实就是一块一块小的存储空间，只不过其存取速度要比内存快得多)
关键词：
  static     
       静态局部变量:  即使这个函数运行结束，这个静态变量的值还是不会被销毁，函数下次使用时仍然能用到这个值。
       静态全局变量:  作用域仅限于变量被定义的文件中，其他文件即使用 extern 声明也没法使用他   
	   修饰函数    :  指对函数的作用域仅局限于本文件(所以又称内部函数)
  register 声明寄存器变量（最快的关键字,不能用取址运算符“&”来获取 register 变量的地址）
  const 声明只读变量
  volatile 说明变量在程序执行中可被隐含地改变  （volatile 关键字告诉编译器 i 是随时可能发生变化的，每次使用它的时候必须从内存中取出 i的值，因而编译器生成的汇编代码会重新从 i 的地址处读取数据放在 k 中）
  sizeof 计算对象所占内存空间大小
								
推荐：if(NULL == p); if(NULL != p);		 因为if(p = NULL)，这个表达式编译器当然会认为是正确的，但却不是你要表达的意思						
case 后面只能是整型或字符型的常量或常量表达式

在多重循环中，如果有可能，应当将最长的循环放在最内层，最短的循环放在最外层，以减少 CPU 跨切循环层的次数。

如果函数无参数,那么应声明其参数为 void
													 
结构体所占的内存大小是其成员所占内存之和 空结构体的大小就定位 1 个 byte

如果一些数据不可能在同一时间同时被用到，则可以使用 union

enum 变量类型还可以给其中的常量符号赋值，如果不赋值则会从被赋初值的那个常量开始依次加1，如果都没有赋值，它们的值从 0 开始依次递增 1
													 
关键字typedef在编译阶段有效，由于是在编译阶段，因此typedef有类型检查的功能。 #define则是宏定义，发生在预处理阶段，也就是编译之前，它只进行简单而机械的字符串替换，而不进行任何检查。													 
			
双引号引起来的都是字符串常量，单引号引起来的都是字符常量

[]高于*         .的优先级高于*   函数()高于*     == 和!=高于位操作和赋值符      算术运算符高于位移运算符

#undef 撤销已定义过的宏名   #if #else #elif #endif

用#ifdef 与#ifndef 命令分别表示“如果有定义”及“如果无定义”，是条件编译的另一种方法。

#error：编译程序时，只要遇到 #error 就会生成一个编译错误提示消息，并停止编译

UL：unsigned long

define 是个演技高超的替身演员，但也经常耍大牌。要搞定它其实很简单，别吝啬括号就行了
													 
#pragma message(“消息文本”)	  当编译器遇到这条指令时就在编译输出窗口中将消息文本打印出来。

指针
   指针变量 p 里存储的任何数据都将被当作地址来处理，int *p 来创一个四个字节的空间存储地址，p本身的地址不可以改变
   
   指针就是指针，指针变量在 32 位系统下，永远占 4 个 byte，其值为某一个内存的地址
   
   以下标的形式访问在本质上与以指针的形式访问没有区别，只是写法上不同罢了
   
   地址偏移以一个字节为单位 如0x00 和 0x01     但地址偏移是看定义的类型偏移的
   
   在short  p[3] = { 1,2,3 };
   printf("%#x\n", (&p+1));       &p+1 （偏移一整个数组地址） 和p+1 （ 只偏移一个数组元素的地址） 是不一样的
   
   int *ptr2=(int *)((int)a+1);  *ptr2 = 0x00ff01~0x00ff04连续4字节的值 （先把a转为int,若a = 0x00ff00，则ptr2的值 = 0x00ff01）
	
	
	
	int *p1[10]：指针数组 （“[]”的优先级比“*”要高）  
   
   a+1，等同于&a[1]    代码在一个地方定义为指针，在别的地方也只能声明为指针；在一个的地方定义为数组，在别的地方也只能声明为数组
   
   如何将数值存储到指定的内存地址 假设现在需要往内存 0x12ff7c 地址上存入一个整型数 0x100。
		int *p = (int *)0x12ff7c;
		*p = 0x100;
	
	%d 十进制输出   %c用来输出一个字符  %s用来输出字符串 
	%f用来输出实数小数部分输出 6 位，超过 6 位的四舍五入。
	%.mf输出实数时小数点后保留 m 位，注意 m 前面有个点   
	%o	以八进制整数形式输出
	%x  小写的x，输出小写；X，输出大写；加一个#，以标准的十六进制形式输出。（最好用用%#X）
	%p   打印指针地址 （p是pointer（指针）)
	
	a[2][2]  储存 ：a[0][0]->a[0][1]->a[1][0]->a[1][1]
	#include <malloc.h>   malloc 函数申请的是连续的一块内存  malloc 函数申请内存有不成功的可能，那我们在使用指向这块内存的指针时，必
      须用 if（NULL ！= p）语句来验证内存确实分配成功了。
      free 完之后，一定要给指针置 NULL。

内存
  内存分为三个部分：静态区，栈，堆
     静态区：保存自动全局变量和 static 变量（包括 static 全局和局部变量）。静态区的内容在总个程序的生命周期内都存在，由编译器在编译的时候分配。
     栈：保存局部变量。栈上的内容只在函数的范围内存在，当函数运行结束，这些内容也会自动被销毁。其特点是效率高，但空间大小有限。
     堆：由 malloc 系列函数或 new 操作符分配的内存。其生命周期由 free 或 delete 决定。在没有释放之前一直存在，直到程序结束。其特点是使用灵活，空间比较大，但容易出错
  
  字符串常量的结束标志“\0”。  
										
  return 语句不可返回指向“栈内存”的“指针”，因为该内存在函数体结束时被自动销毁	
  建议尽量少用static 局部变量，除非必需
  平时写代码，不到万不得已，尽量不要用递归  
  
  
  
  把全局变量定义成一个结构，定义一个全局的结构体变量
  
  常量指针：指向常量的指针，地址可变，内容不可变。eg: const int *p;
  指针常量：指针本身是常量，地址不可变，内容可变。eg: int *const p;
  
  	p = (int *)&a  将地址强制转换为指针，该指针里面的内容就是该地址
	
													 
													 
													 